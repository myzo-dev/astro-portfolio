---
type Props = {
    class?: string;
    href?: string;
    type?: string;
    style?: 'light' | 'light-ghost' | 'primary';
    size: 'xs' | 'sm' | 'base';
}

const { class: classes, href, style, size } = Astro.props;

const buttonTypeClasses = (): string => {
    switch (style) {
        case 'light':
            return 'text-neutral-800 bg-white';
        case 'light-ghost':
            return 'text-white border border-neutral-100';
        default:
            return 'text-white bg-primary-300';
    }
}

const buttonSizeClasses = (): string => {
    switch (size) {
        case 'xs':
            return 'px-10 py-[20px] text-xs';
        case 'sm':
            return 'px-[28px] py-[12px] text-sm';
        default:
            return 'px-32 py-[14px]';
    }
}

const buttonClasses: string = `relative align-middle font-bold text-center rounded-full overflow-hidden group transition-colors duration-500 ease-in-out ${classes} ${buttonTypeClasses()} ${buttonSizeClasses()}`;

const Component = href ? 'a' : 'button';
---

<Component class={buttonClasses} href={href}>
    <slot />
</Component>