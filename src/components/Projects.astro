---
import type { Project } from "../../types";

type Props = {
    projects: Project[];
}

const { projects } = Astro.props;
---

<ul class="gap-x-24 lg:gap-x-48 gap-y-72 lg:gap-y-96 grid grid-cols-1 md:grid-cols-2" data-projects-grid>
    <div class="size-112 fixed top-0 left-0 flex justify-center items-center scale-0 z-100 rounded-full font-extrabold text-sm pointer-events-none bg-primary-300 transition-transform" data-hover-element>
        Zobrazi≈•
    </div>

    {projects.map(project => (
        <li>
            <a class="projects-item w-full group" href={ project.url } target="_blank">
                <div class="aspect-w-1 aspect-h-1 rounded-24 bg-neutral-800" style={ `background-color: ${project.backgroundColor}` }>
                    <figure class="p-24 md:p-32 flex justify-center items-center">
                        <picture>
                            <source srcset={ `/images/projects/${project.slug}.webp` } type="image/webp" />

                            <img 
                                class="h-auto rounded-8 transition-transform duration-300 group-hover:scale-[1.025]" 
                                src={ `/images/projects/${project.slug}.jpg` } 
                                alt={ project.name }
                                width={500}
                                height={293}
                                loading="lazy"
                            />
                        </picture>
                    </figure>
                </div>
            
                <div class="py-16 lg:py-24 flex justify-between items-center border-b border-neutral-600 transition-opacity duration-300 group-hover:opacity-70">
                    <h4>{ project.name }</h4>
                    <small class="text-xs md:text-sm text-neutral-80">{ project.role }</small>
                </div>
            </a>
        </li>
    ))}
</ul>

<script>
    import gsap from 'gsap';

    document.addEventListener('astro:page-load', () => {
        const hoverElement = document.querySelector('[data-hover-element]') as HTMLDivElement;

        if (!hoverElement) return;

        const updateCoords = (event: MouseEvent) => {
            const { clientX, clientY } = event;
            const newX = clientX - 56;
            const newY = clientY - 64;

            gsap.to(hoverElement, {
                left: newX,
                top: newY,
                duration: 0.3,
            });
        }

        const elements = document.querySelectorAll('.projects-item') as NodeListOf<HTMLAnchorElement>;

        elements.forEach((element) => {
            element.onmouseenter = (event) => {
                updateCoords(event);
                hoverElement.classList.add('!scale-100');
            }

            element.onmouseleave = () => {
                hoverElement.classList.remove('!scale-100');
            }

            element.onmousemove = (event) => {
                requestAnimationFrame(() => updateCoords(event));
            }
        });
    });
</script>
